package stringandarr;

/**
 * @author chengj
 * @Description 生命游戏 中等
 * @Date 2022/2/8
 */
//根据 百度百科 ， 生命游戏 ，简称为 生命 ，是英国数学家约翰·何顿·康威在 1970 年发明的细胞自动机。
//
// 给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞都具有一个初始状态： 1 即为 活细胞 （live），或 0 即为 死细胞
// （dead）。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：
//
//
// 如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；
// 如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；
// 如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；
// 如果死细胞周围正好有三个活细胞，则该位置死细胞复活；
//
//
// 下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。给你 m x n 网格面板 board 的当前状态，返
//回下一个状态。
//
//
//
// 示例 1：
//
//
//输入：board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]
//输出：[[0,0,0],[1,0,1],[0,1,1],[0,1,0]]
//
//
// 示例 2：
//
//
//输入：board = [[1,1],[1,0]]
//输出：[[1,1],[1,1]]
//
//
//
//
// 提示：
//
//
// m == board.length
// n == board[i].length
// 1 <= m, n <= 25
// board[i][j] 为 0 或 1
//
//
//
//
// 进阶：
//
//
// 你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。
// 本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？
//
// Related Topics 数组 矩阵 模拟 👍 404 👎 0
public class GameOfLife {

    /**
     * 算法
     *
     * 遍历 board 中的细胞。
     *
     * 根据数组的细胞状态计算新一轮的细胞状态，这里会用到能同时代表过去状态和现在状态的复合状态。
     *
     * 具体的计算规则如下所示：
     *
     * 规则 1：如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡。这时候，将细胞值改为 -1，代表这个细胞过去是活的现在死了；
     *
     * 规则 2：如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活。这时候不改变细胞的值，仍为 1；
     *
     * 规则 3：如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡。这时候，将细胞的值改为 -1，代表这个细胞过去是活的现在死了。可以看到，因为规则 1 和规则 3 下细胞的起始终止状态是一致的，因此它们的复合状态也一致；
     *
     * 规则 4：如果死细胞周围正好有三个活细胞，则该位置死细胞复活。这时候，将细胞的值改为 2，代表这个细胞过去是死的现在活了。
     *
     * 根据新的规则更新数组；
     *
     * 现在复合状态隐含了过去细胞的状态，所以我们可以在不复制数组的情况下完成原地更新；
     *
     * 对于最终的输出，需要将 board 转成 0，1 的形式。因此这时候需要再遍历一次数组，将复合状态为 2 的细胞的值改为 1，复合状态为 -1 的细胞的值改为 0。
     *
     * 作者：LeetCode-Solution
     * 链接：https://leetcode-cn.com/problems/game-of-life/solution/sheng-ming-you-xi-by-leetcode-solution/
     * 来源：力扣（LeetCode）
     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
     * @param board
     */
    public void gameOfLife(int[][] board) {
        int rows = board.length;
        int cols = board[0].length;
        for (int i = 0;i < rows;i++){
            for (int j =0;j < cols;j++){

                //周围存活数
                //这里需要减去他自己，遍历周围的时候会把他自己也算上，如果不够减去他自己count 就会多了1
                int count = board[i][j] == 1 ? -1 : 0;
                // 遍历周边
                for (int r = -1;r< 2;r++){
                    for (int c = -1;c<2;c++){
                        int rr = r + i;
                        int cc = c + j;
                        if ((rr >= 0 && rr < rows) && (cc >=0 && cc < cols) // 越界判断
                                && (Math.abs(board[rr][cc]) == 1)){
                            count++;
                        }
                    }
                }
                if(board[i][j] == 1 && (count < 2 || count > 3)) {
                    board[i][j] = -1;
                }
                if(board[i][j] == 0 && count == 3) {
                    board[i][j] = 2;
                }
            }
        }

        // 重复赋值
        for (int i = 0;i < rows;i++) {
            for (int j = 0; j < cols; j++) {
                if (board[i][j] >0){
                    board[i][j] = 1;
                }else {
                    board[i][j] = 0;
                }
            }
        }
    }
}
